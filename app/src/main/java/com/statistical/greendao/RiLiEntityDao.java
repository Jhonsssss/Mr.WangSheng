package com.statistical.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.statistical.time.bean.RiLiEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RI_LI_ENTITY".
*/
public class RiLiEntityDao extends AbstractDao<RiLiEntity, Long> {

    public static final String TABLENAME = "RI_LI_ENTITY";

    /**
     * Properties of entity RiLiEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdSelf = new Property(0, Long.class, "idSelf", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Yangli = new Property(2, String.class, "yangli", false, "YANGLI");
        public final static Property Yinli = new Property(3, String.class, "yinli", false, "YINLI");
        public final static Property Wuxing = new Property(4, String.class, "wuxing", false, "WUXING");
        public final static Property Chongsha = new Property(5, String.class, "chongsha", false, "CHONGSHA");
        public final static Property Baiji = new Property(6, String.class, "baiji", false, "BAIJI");
        public final static Property Jishen = new Property(7, String.class, "jishen", false, "JISHEN");
        public final static Property Yi = new Property(8, String.class, "yi", false, "YI");
        public final static Property Xiongshen = new Property(9, String.class, "xiongshen", false, "XIONGSHEN");
        public final static Property Ji = new Property(10, String.class, "ji", false, "JI");
        public final static Property Year = new Property(11, int.class, "year", false, "YEAR");
        public final static Property Month = new Property(12, int.class, "month", false, "MONTH");
        public final static Property Day = new Property(13, int.class, "day", false, "DAY");
    }


    public RiLiEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RiLiEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RI_LI_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idSelf
                "\"ID\" TEXT," + // 1: id
                "\"YANGLI\" TEXT," + // 2: yangli
                "\"YINLI\" TEXT," + // 3: yinli
                "\"WUXING\" TEXT," + // 4: wuxing
                "\"CHONGSHA\" TEXT," + // 5: chongsha
                "\"BAIJI\" TEXT," + // 6: baiji
                "\"JISHEN\" TEXT," + // 7: jishen
                "\"YI\" TEXT," + // 8: yi
                "\"XIONGSHEN\" TEXT," + // 9: xiongshen
                "\"JI\" TEXT," + // 10: ji
                "\"YEAR\" INTEGER NOT NULL ," + // 11: year
                "\"MONTH\" INTEGER NOT NULL ," + // 12: month
                "\"DAY\" INTEGER NOT NULL );"); // 13: day
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RI_LI_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RiLiEntity entity) {
        stmt.clearBindings();
 
        Long idSelf = entity.getIdSelf();
        if (idSelf != null) {
            stmt.bindLong(1, idSelf);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String yangli = entity.getYangli();
        if (yangli != null) {
            stmt.bindString(3, yangli);
        }
 
        String yinli = entity.getYinli();
        if (yinli != null) {
            stmt.bindString(4, yinli);
        }
 
        String wuxing = entity.getWuxing();
        if (wuxing != null) {
            stmt.bindString(5, wuxing);
        }
 
        String chongsha = entity.getChongsha();
        if (chongsha != null) {
            stmt.bindString(6, chongsha);
        }
 
        String baiji = entity.getBaiji();
        if (baiji != null) {
            stmt.bindString(7, baiji);
        }
 
        String jishen = entity.getJishen();
        if (jishen != null) {
            stmt.bindString(8, jishen);
        }
 
        String yi = entity.getYi();
        if (yi != null) {
            stmt.bindString(9, yi);
        }
 
        String xiongshen = entity.getXiongshen();
        if (xiongshen != null) {
            stmt.bindString(10, xiongshen);
        }
 
        String ji = entity.getJi();
        if (ji != null) {
            stmt.bindString(11, ji);
        }
        stmt.bindLong(12, entity.getYear());
        stmt.bindLong(13, entity.getMonth());
        stmt.bindLong(14, entity.getDay());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RiLiEntity entity) {
        stmt.clearBindings();
 
        Long idSelf = entity.getIdSelf();
        if (idSelf != null) {
            stmt.bindLong(1, idSelf);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String yangli = entity.getYangli();
        if (yangli != null) {
            stmt.bindString(3, yangli);
        }
 
        String yinli = entity.getYinli();
        if (yinli != null) {
            stmt.bindString(4, yinli);
        }
 
        String wuxing = entity.getWuxing();
        if (wuxing != null) {
            stmt.bindString(5, wuxing);
        }
 
        String chongsha = entity.getChongsha();
        if (chongsha != null) {
            stmt.bindString(6, chongsha);
        }
 
        String baiji = entity.getBaiji();
        if (baiji != null) {
            stmt.bindString(7, baiji);
        }
 
        String jishen = entity.getJishen();
        if (jishen != null) {
            stmt.bindString(8, jishen);
        }
 
        String yi = entity.getYi();
        if (yi != null) {
            stmt.bindString(9, yi);
        }
 
        String xiongshen = entity.getXiongshen();
        if (xiongshen != null) {
            stmt.bindString(10, xiongshen);
        }
 
        String ji = entity.getJi();
        if (ji != null) {
            stmt.bindString(11, ji);
        }
        stmt.bindLong(12, entity.getYear());
        stmt.bindLong(13, entity.getMonth());
        stmt.bindLong(14, entity.getDay());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RiLiEntity readEntity(Cursor cursor, int offset) {
        RiLiEntity entity = new RiLiEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idSelf
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // yangli
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // yinli
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wuxing
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // chongsha
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // baiji
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // jishen
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // yi
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // xiongshen
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ji
            cursor.getInt(offset + 11), // year
            cursor.getInt(offset + 12), // month
            cursor.getInt(offset + 13) // day
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RiLiEntity entity, int offset) {
        entity.setIdSelf(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYangli(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYinli(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWuxing(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChongsha(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBaiji(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJishen(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setYi(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setXiongshen(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJi(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setYear(cursor.getInt(offset + 11));
        entity.setMonth(cursor.getInt(offset + 12));
        entity.setDay(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RiLiEntity entity, long rowId) {
        entity.setIdSelf(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RiLiEntity entity) {
        if(entity != null) {
            return entity.getIdSelf();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RiLiEntity entity) {
        return entity.getIdSelf() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
