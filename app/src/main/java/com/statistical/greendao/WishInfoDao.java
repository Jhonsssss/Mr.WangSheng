package com.statistical.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.statistical.time.bean.WishInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WISH_INFO".
*/
public class WishInfoDao extends AbstractDao<WishInfo, Long> {

    public static final String TABLENAME = "WISH_INFO";

    /**
     * Properties of entity WishInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WishName = new Property(1, String.class, "wishName", false, "WISH_NAME");
        public final static Property WishYear = new Property(2, int.class, "wishYear", false, "WISH_YEAR");
        public final static Property WishMonth = new Property(3, int.class, "wishMonth", false, "WISH_MONTH");
        public final static Property WishDay = new Property(4, int.class, "wishDay", false, "WISH_DAY");
        public final static Property Style = new Property(5, int.class, "style", false, "STYLE");
        public final static Property IsFinish = new Property(6, boolean.class, "isFinish", false, "IS_FINISH");
        public final static Property Theme = new Property(7, String.class, "theme", false, "THEME");
        public final static Property Index = new Property(8, int.class, "index", false, "INDEX");
        public final static Property FinishTime = new Property(9, String.class, "finishTime", false, "FINISH_TIME");
        public final static Property CreateTime = new Property(10, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Name = new Property(11, String.class, "name", false, "NAME");
    }


    public WishInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WishInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WISH_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WISH_NAME\" TEXT," + // 1: wishName
                "\"WISH_YEAR\" INTEGER NOT NULL ," + // 2: wishYear
                "\"WISH_MONTH\" INTEGER NOT NULL ," + // 3: wishMonth
                "\"WISH_DAY\" INTEGER NOT NULL ," + // 4: wishDay
                "\"STYLE\" INTEGER NOT NULL ," + // 5: style
                "\"IS_FINISH\" INTEGER NOT NULL ," + // 6: isFinish
                "\"THEME\" TEXT," + // 7: theme
                "\"INDEX\" INTEGER NOT NULL ," + // 8: index
                "\"FINISH_TIME\" TEXT," + // 9: finishTime
                "\"CREATE_TIME\" TEXT," + // 10: createTime
                "\"NAME\" TEXT);"); // 11: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WISH_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WishInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wishName = entity.getWishName();
        if (wishName != null) {
            stmt.bindString(2, wishName);
        }
        stmt.bindLong(3, entity.getWishYear());
        stmt.bindLong(4, entity.getWishMonth());
        stmt.bindLong(5, entity.getWishDay());
        stmt.bindLong(6, entity.getStyle());
        stmt.bindLong(7, entity.getIsFinish() ? 1L: 0L);
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(8, theme);
        }
        stmt.bindLong(9, entity.getIndex());
 
        String finishTime = entity.getFinishTime();
        if (finishTime != null) {
            stmt.bindString(10, finishTime);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(11, createTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WishInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wishName = entity.getWishName();
        if (wishName != null) {
            stmt.bindString(2, wishName);
        }
        stmt.bindLong(3, entity.getWishYear());
        stmt.bindLong(4, entity.getWishMonth());
        stmt.bindLong(5, entity.getWishDay());
        stmt.bindLong(6, entity.getStyle());
        stmt.bindLong(7, entity.getIsFinish() ? 1L: 0L);
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(8, theme);
        }
        stmt.bindLong(9, entity.getIndex());
 
        String finishTime = entity.getFinishTime();
        if (finishTime != null) {
            stmt.bindString(10, finishTime);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(11, createTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WishInfo readEntity(Cursor cursor, int offset) {
        WishInfo entity = new WishInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // wishName
            cursor.getInt(offset + 2), // wishYear
            cursor.getInt(offset + 3), // wishMonth
            cursor.getInt(offset + 4), // wishDay
            cursor.getInt(offset + 5), // style
            cursor.getShort(offset + 6) != 0, // isFinish
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // theme
            cursor.getInt(offset + 8), // index
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // finishTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WishInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWishName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWishYear(cursor.getInt(offset + 2));
        entity.setWishMonth(cursor.getInt(offset + 3));
        entity.setWishDay(cursor.getInt(offset + 4));
        entity.setStyle(cursor.getInt(offset + 5));
        entity.setIsFinish(cursor.getShort(offset + 6) != 0);
        entity.setTheme(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIndex(cursor.getInt(offset + 8));
        entity.setFinishTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WishInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WishInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WishInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
