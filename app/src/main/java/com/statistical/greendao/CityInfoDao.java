package com.statistical.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.statistical.time.bean.CityInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY_INFO".
*/
public class CityInfoDao extends AbstractDao<CityInfo, Long> {

    public static final String TABLENAME = "CITY_INFO";

    /**
     * Properties of entity CityInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Pid = new Property(1, int.class, "pid", false, "PID");
        public final static Property City_code = new Property(2, String.class, "city_code", false, "CITY_CODE");
        public final static Property City_name = new Property(3, String.class, "city_name", false, "CITY_NAME");
        public final static Property Post_code = new Property(4, String.class, "post_code", false, "POST_CODE");
        public final static Property Area_code = new Property(5, String.class, "area_code", false, "AREA_CODE");
        public final static Property Ctime = new Property(6, String.class, "ctime", false, "CTIME");
        public final static Property CityId = new Property(7, Long.class, "cityId", true, "_id");
    }


    public CityInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CityInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_INFO\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"PID\" INTEGER NOT NULL ," + // 1: pid
                "\"CITY_CODE\" TEXT," + // 2: city_code
                "\"CITY_NAME\" TEXT," + // 3: city_name
                "\"POST_CODE\" TEXT," + // 4: post_code
                "\"AREA_CODE\" TEXT," + // 5: area_code
                "\"CTIME\" TEXT," + // 6: ctime
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 7: cityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CityInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPid());
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(3, city_code);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(4, city_name);
        }
 
        String post_code = entity.getPost_code();
        if (post_code != null) {
            stmt.bindString(5, post_code);
        }
 
        String area_code = entity.getArea_code();
        if (area_code != null) {
            stmt.bindString(6, area_code);
        }
 
        String ctime = entity.getCtime();
        if (ctime != null) {
            stmt.bindString(7, ctime);
        }
 
        Long cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(8, cityId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CityInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPid());
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(3, city_code);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(4, city_name);
        }
 
        String post_code = entity.getPost_code();
        if (post_code != null) {
            stmt.bindString(5, post_code);
        }
 
        String area_code = entity.getArea_code();
        if (area_code != null) {
            stmt.bindString(6, area_code);
        }
 
        String ctime = entity.getCtime();
        if (ctime != null) {
            stmt.bindString(7, ctime);
        }
 
        Long cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(8, cityId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7);
    }    

    @Override
    public CityInfo readEntity(Cursor cursor, int offset) {
        CityInfo entity = new CityInfo( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // post_code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // area_code
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ctime
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // cityId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CityInfo entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setPid(cursor.getInt(offset + 1));
        entity.setCity_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPost_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArea_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCtime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCityId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CityInfo entity, long rowId) {
        entity.setCityId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CityInfo entity) {
        if(entity != null) {
            return entity.getCityId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CityInfo entity) {
        return entity.getCityId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
